package ReverseStringVedio150;

public class ReverseDemoP02 {
    public static void main(String[] args) {

        String s = "mithu";
        String t = "";

        for (int i = s.length() -1; i >= 0 ; i--) {

            t = t + s.charAt(i);
        }
        System.out.println(t);
        if(s == t){
            // if it is palindrome
        }

    } // T value is m a d a m
}
/*
public class ReverseDemoP02 {
    public static void main(String[] args) {

        String s = "mithu";
        String t = "";

        for (int i = s.length() - 1; i >= 0; i--) {
            t = t + s.charAt(i);
        }

        System.out.println(t);

        if (s == t) {
            // if it is palindrome
        }

    }
}

/*
public class ReverseDemoP02 { // একটি নতুন ক্লাস 'ReverseDemoP02' তৈরি করা হয়েছে
    public static void main(String[] args) { // প্রধান মেথড 'main' যেখানে প্রোগ্রামটি শুরু হয়
        String s = "mithu"; // একটি স্ট্রিং ভেরিয়েবল 's' তৈরি করা হয়েছে এবং সেটি "mithu" মান দিয়ে initialize করা হয়েছে
        String t = ""; // একটি খালি স্ট্রিং ভেরিয়েবল 't' তৈরি করা হয়েছে যেখানে উল্টানো স্ট্রিং জমা করা হবে

        for (int i = s.length() - 1; i >= 0; i--) { // একটি 'for' লুপ যা স্ট্রিং 's' এর প্রতিটি ক্যারেক্টার উল্টো দিক থেকে প্রিন্ট করবে
            t = t + s.charAt(i); // স্ট্রিং 's' এর 'i' তম ক্যারেক্টার 't' স্ট্রিং এর শেষে যোগ করা হচ্ছে
        }
        System.out.println(t); // উল্টানো স্ট্রিং 't' প্রিন্ট করা হচ্ছে

        if (s == t) { // যদি স্ট্রিং 's' এবং 't' সমান হয়, তা চেক করা হচ্ছে (যা এখানে সঠিক নয়)
            // যদি এটি প্যালিনড্রোম হয়
        }

    } // 't' স্ট্রিং এর মান হল 'uhtim'
}
বিস্তারিত ব্যাখ্যা:
প্রথম লাইন:


public class ReverseDemoP02 {
কাজ: একটি নতুন ক্লাস ReverseDemoP02 তৈরি করা হয়েছে।
কেন: Java প্রোগ্রামে সবকিছু একটি ক্লাসের মধ্যে রাখতে হয়। এই ক্লাসের মধ্যে আমরা আমাদের প্রোগ্রামটি লিখবো।
দ্বিতীয় লাইন:


public static void main(String[] args) {
কাজ: প্রধান মেথড main ঘোষণা করা হয়েছে, যেখানে প্রোগ্রামটি শুরু হয়।
কেন: প্রতিটি Java প্রোগ্রামের জন্য একটি প্রধান মেথড প্রয়োজন যা প্রোগ্রামটি চালানোর জন্য প্রবেশ স্থান (entry point)।
তৃতীয় লাইন:


String s = "mithu";
কাজ: একটি স্ট্রিং ভেরিয়েবল s তৈরি করা হয়েছে এবং সেটি "mithu" মান দিয়ে initialize করা হয়েছে।
কেন: আমাদের একটি স্ট্রিং দরকার যা আমরা উল্টানো ক্রমে প্রিন্ট করবো।
চতুর্থ লাইন:


String t = "";
কাজ: একটি খালি স্ট্রিং ভেরিয়েবল t তৈরি করা হয়েছে।
কেন: t ভেরিয়েবলে উল্টানো স্ট্রিংটি জমা রাখা হবে।
পঞ্চম লাইন:


for (int i = s.length() - 1; i >= 0; i--) {
কাজ: একটি for লুপ শুরু হয়েছে যা স্ট্রিং s এর প্রতিটি ক্যারেক্টার উল্টো দিক থেকে প্রিন্ট করবে।
Initialization (int i = s.length() - 1): লুপের ভেরিয়েবল i স্ট্রিং s এর শেষ ক্যারেক্টারের ইন্ডেক্স দিয়ে শুরু হয়।
Condition (i >= 0): লুপটি চলতে থাকবে যতক্ষণ i এর মান ০ বা তার বেশি থাকে।
Decrement (i--): প্রতিবার লুপটি চলার পর i এর মান ১ করে কমানো হয়।
লুপের অভ্যন্তরের অংশ:

t = t + s.charAt(i);
কাজ: স্ট্রিং s এর বর্তমান ক্যারেক্টার i ইনডেক্স থেকে নেয়া হচ্ছে এবং t স্ট্রিং এর শেষে যোগ করা হচ্ছে।
কেন: t স্ট্রিং এ s এর ক্যারেক্টারগুলো উল্টো ক্রমে সংরক্ষণ করা হচ্ছে।
লুপের বাইরে:


System.out.println(t);
কাজ: উল্টানো স্ট্রিং t প্রিন্ট করা হচ্ছে।
কেন: আমরা দেখতে চাই t স্ট্রিংটি কেমন দেখাচ্ছে।
প্যালিনড্রোম চেক করার জন্য:


if (s == t) {
    // if it is palindrome
}
কাজ: স্ট্রিং s এবং t সমান কিনা তা চেক করা হচ্ছে (যা এখানে সঠিক নয়)।
কেন: যদি s এবং t সমান হয়, তাহলে স্ট্রিংটি প্যালিনড্রোম।
সমস্যা: এখানে, s == t ব্যবহার করা হচ্ছে যা দুটি স্ট্রিং অবজেক্টের রেফারেন্স চেক করে, যা সঠিক নয়। স্ট্রিং এর মান চেক করার জন্য s.equals(t) ব্যবহার করা উচিত।
সঠিক প্যালিনড্রোম চেকিং কোড:

public class ReverseDemoP02 {
    public static void main(String[] args) {

        String s = "mithu";
        String t = "";

        for (int i = s.length() - 1; i >= 0; i--) {
            t = t + s.charAt(i);
        }

        System.out.println(t);

        if (s.equals(t)) {
            System.out.println(s + " is a palindrome.");
        } else {
            System.out.println(s + " is not a palindrome.");
        }
    }
}
এখানে, s.equals(t) ব্যবহার করা হয়েছে স্ট্রিং এর মান চেক করার জন্য। এই কোডটি স্ট্রিং উল্টানো এবং প্যালিনড্রোম চেকিং উভয় কাজ সঠিকভাবে করে।








 */











/*

লাইনের বিস্তারিত ব্যাখ্যা:
প্রথম লাইন:


public class ReverseDemoP02 {
কাজ: একটি নতুন ক্লাস ReverseDemoP02 তৈরি করা হয়েছে।
কেন: Java প্রোগ্রামে সবকিছু একটি ক্লাসের মধ্যে রাখতে হয়।
দ্বিতীয় লাইন:


public static void main(String[] args) {
কাজ: প্রধান মেথড main ঘোষণা করা হয়েছে যা প্রোগ্রামটি শুরু হওয়ার স্থান।
কেন: প্রতিটি Java প্রোগ্রামের জন্য একটি প্রধান মেথড প্রয়োজন যা প্রোগ্রামটি চালানোর জন্য প্রবেশ স্থান।
তৃতীয় লাইন:


String s = "mithu";
কাজ: একটি স্ট্রিং ভেরিয়েবল s তৈরি করা হয়েছে এবং তাকে "mithu" স্ট্রিং দিয়ে initialize করা হয়েছে।
কেন: আমাদের একটি স্ট্রিং দরকার যা উল্টানো হবে।
চতুর্থ লাইন:


String t = "";
কাজ: একটি স্ট্রিং ভেরিয়েবল t তৈরি করা হয়েছে এবং তাকে একটি খালি স্ট্রিং দিয়ে initialize করা হয়েছে।
কেন: t ভেরিয়েবলে উল্টানো স্ট্রিংটি জমা রাখা হবে।
পঞ্চম লাইন:


for (int i = s.length() - 1; i >= 0; i--) {
কাজ: একটি for লুপ শুরু হয়েছে যা স্ট্রিং s এর প্রতিটি ক্যারেক্টার উল্টো ক্রমে সংগ্রহ করবে।
Initialization (int i = s.length() - 1): লুপের ভেরিয়েবল i স্ট্রিং s এর শেষ ক্যারেক্টারের ইন্ডেক্স দিয়ে শুরু হয়।
Condition (i >= 0): লুপটি চলতে থাকবে যতক্ষণ i এর মান ০ বা তার বেশি থাকে।
Decrement (i--): প্রতিবার লুপটি চলার পর i এর মান ১ করে কমানো হয়।
লুপের অভ্যন্তরের অংশ:


t = t + s.charAt(i);
কাজ: স্ট্রিং s এর বর্তমান ক্যারেক্টার i ইনডেক্স থেকে নেয়া হচ্ছে এবং t স্ট্রিং এর শেষে যোগ করা হচ্ছে।
কেন: t স্ট্রিং এ s এর ক্যারেক্টারগুলো উল্টো ক্রমে সংরক্ষণ করা হচ্ছে।
লুপের বাইরে:


System.out.println(t);
কাজ: উল্টানো স্ট্রিং t প্রিন্ট করা হচ্ছে।
কেন: আমরা দেখতে চাই t স্ট্রিংটি কেমন দেখাচ্ছে।
প্যালিনড্রোম চেক করার জন্য:


if (s == t) {
    // if it is palindrome
}
কাজ: স্ট্রিং s এবং t সমান কিনা তা চেক করা হচ্ছে।
কেন: যদি s এবং t সমান হয়, তাহলে স্ট্রিংটি প্যালিনড্রোম।
সমস্যা: এখানে, s == t ব্যবহার করা হচ্ছে যা দুটি স্ট্রিং অবজেক্টের রেফারেন্স চেক করে, যা সঠিক নয়। স্ট্রিং এর মান চেক করার জন্য s.equals(t) ব্যবহার করা উচিত।
কোডের কাজের সারাংশ:
একটি স্ট্রিং s নেয়া হয়েছে।
একটি খালি স্ট্রিং t নেয়া হয়েছে।
for লুপ ব্যবহার করে স্ট্রিং s এর প্রতিটি ক্যারেক্টার উল্টো ক্রমে t এ যোগ করা হচ্ছে।
উল্টানো স্ট্রিং t প্রিন্ট করা হচ্ছে।
চেক করা হচ্ছে যে s এবং t সমান কিনা (এটি সঠিকভাবে করতে s.equals(t) ব্যবহার করা উচিত)।
সঠিক প্যালিনড্রোম চেকিং কোড:

public class ReverseDemoP02 {
    public static void main(String[] args) {

        String s = "mithu";
        String t = "";

        for (int i = s.length() - 1; i >= 0; i--) {
            t = t + s.charAt(i);
        }

        System.out.println(t);

        if (s.equals(t)) {
            System.out.println(s + " is a palindrome.");
        } else {
            System.out.println(s + " is not a palindrome.");
        }
    }
}
এখানে, s.equals(t) ব্যবহার করা হয়েছে স্ট্রিং এর মান চেক করার জন্য। এই কোডটি স্ট্রিং উল্টানো এবং প্যালিনড্রোম চেকিং উভয় কাজ সঠিকভাবে করে।







 */
